A New Perspective of Graph Data and A Generic and Efficient Method for Large Scale Graph Data Traversal
>> グラフデータの新しい視点と大規模グラフデータ探索のための汎用的かつ効率的な手法


●概要

BFSアルゴリズムは基本的なグラフデータ処理アルゴリズムであり、他の多くのグラフデータ処理アルゴリズムはBFSアルゴリズムと類似したアーキテクチャの特徴を持ち、BFSアルゴリズムのモデルに基づいて構築することができる。我々は、グラフアルゴリズムと従来の高性能アルゴリズムの違いを詳細に分析し、アルゴリズムをデータとの実行時間の相関性に基づいてデータ独立アルゴリズムとデータ相関アルゴリズムに分類する新しい方法を提案し、この新しい分類を用いて本論文で提案する手法の妥当性を説明する。グラフデータをより深く分析することで、グラフと木という2つの基本的なデータ構造の間にリンクを確立し、グラフデータをより小さな部分グラフとエッジツリーから構成されるものとして見ることで、グラフデータを理解するための新たな基本的な視点を提案する。グラフの頂点が小さいことがランダムメモリアクセスの重要な原因の一つであることがわかった。これに基づいて，低次数の頂点とコア部分グラフを別々に扱うことで，ランダムメモリアクセスのサイズを大幅に小さくし，メモリアクセスの効率を向上させることを基本的な考え方とする，一般的で実装が容易で効率的なグラフデータ処理方法を提案する．最後に、3つの主要データセンターコンピューティングプラットフォーム（Intel、AMD、ARM）で同手法の性能を評価したところ、実験では、ARMプラットフォームで282.70MTEPS/sという性能電力比で、それぞれ19.7％、31.8％、17.9％の性能向上をもたらし、2019年11月のGreen graph500にランクインしたという。ビッグデータセットリストで世界No.1。

●はじめに

データは構造化データと非構造化データに分けることができます。構造化されていないデータは、構造化されたデータと比較して、コンピュータが理解するのがより困難です。グラフデータは非構造化データの代表的な例である。グラフは抽象度が高く柔軟性に富み、自然界に存在するもののつながりや依存関係を適切に表現することができる。グラフ着色、ネットワークルーティング、ネットワークフローなど、グラフ理論でサポートされているグラフ関連のアルゴリズムを用いることで、多くの問題を効率的に解決することができる。また、グラフデータ処理は、巨大で疎な超次元の集合体のマイニングや解析を可能にし、社会ネットワーク、交通ネットワーク、バイオインフォマティクスネットワーク、ナレッジグラフ、GNNなどに広く利用されている[1][2][3][4]。しかし、グラフデータの規模は指数関数的に増大し、辺の数は数十億に達することがあり、また、自然グラフは非常に歪んだ力率分布を示すことが多く[5]、あらゆるレベルの計算システムに大きな課題をもたらしており、大規模なグラフデータをいかに効率的に扱うかが、学界や産業界での研究の焦点となっています。

BFS（Breadth First Search）アルゴリズムはグラフデータ処理の基本的なアルゴリズムであり、PageRank、Single-Source Shortest Path、Connected Com-ponent、Betweenness Centrality など、多くのグラフアルゴリズムが BFS アルゴリズムに基づいて構築可能である[6]。[6]. 現在、多くの主流のグラフ計算フレームワークやプログラミングモデルは、Ligra [6]、Ligra+ [7]、Gemini [8]、Grazelle [9]など、BFSアルゴリズムモデルに基づいた一般的な形式に拡張されています。さらに、他の多くのグラフ処理アルゴリズムは、アーキテクチャの特徴の点でBFSアルゴリズムと本質的に同じである。これらのアルゴリズムは、高性能計算処理のための伝統的なアルゴリズム（行列乗算、FFT、畳み込みなど）とは、アーキテクチャ上の特徴が大きく異なります。グラフ処理アルゴリズムは、データの局所性が低い、メモリアクセス効率が低い、並列性が低い、スケーラビリティが低いなどの典型的な特徴を持っており、グラフデータの処理は高性能コンピュータ上で大きな非効率性を反映しており、コンピュータのあらゆるレベルで設計上の課題を抱えている[10]。Top500ランキングは、コンピュータやクラスタの性能と消費電力を測定するために国際的に使用されており、あらゆるレベルのコンピュータの開発に大きな影響を与えています。使用されているベンチマークTop500は、従来のベクトルや行列の乗算などの高性能な数値計算アルゴリズムであるが、このようなアルゴリズムをコンピュータの効率を測定するために使用することには、いくつかの欠点がある。そこで、コンピュータやクラスタの性能や消費電力を評価するために、BFSアルゴリズムをベンチマークとしたGraph500ランキングが2010年に国際的に提案された[11]。まとめると、BFS のような基本的なアルゴリズムを深く研究することができれば、一般的なグラフ計算フレームワークの研究を促進し、他のグラフ処理アルゴリズムの性能を向上させたり、グラフ処理フレームワークやグラフアルゴリズムの研究に間接的に新しい研究アイデアを提供したりすることができる。また、Top500のようなあらゆるレベルのコンピュータの開発を促進します。

本論文では、単一ノード下でのBFSアルゴリズムの最適化手法を体系的に紹介する。しかし、これらの手法では、すべての頂点を一律に扱い、低次数頂点の特異性を探っていないため、低次数頂点が大量のランダムアクセスをもたらし、性能に影響を与えることになる。我々は、グラフデータを理解するための新しい基本的な方法と、低次数頂点とコア部分グラフを分割するための基本的なBFSアルゴリズムモデルを提案し、ランダムアクセスサイズを大幅に削減し、グラフ処理問題の探索効率を向上させる。この最適化のアイデアは、汎用的なグラフ処理フレームワークでも、CPU/CPUクラスタ/GPU/ASICのような異なるプラットフォームでも実装可能である。本論文の主な貢献は以下の通りである。

・本論文では、グラフアルゴリズムと高性能数値計算アルゴリズムの違いを分析することで、新しいアルゴリズム分類法を提案する。また、本論文で提案した手法の有効性を、この分類アプローチを用いて説明する。
・我々は、より小さなコア部分グラフとエッジツリーとして見ることができるグラフデータを理解するための新しい基本的な視点を提案する。我々は、小さな次数の頂点が、BFSアルゴリズム（次数1など）の高いランダム性の原因の一つであることを発見し、これらの頂点は一般的にエッジツリー上に位置していることを示す。
・我々は、一般的で実装が容易で、効率的で大規模なグラフデータの探索手法を提案する。この手法の中心的な考え方は、低次数の頂点とコア部分グラフを別々に扱うことである。本手法は、BFSアルゴリズムパターンの一般化を維持したまま、グラフ処理フレームワークを構築し、性能を大幅に向上させた。
・本手法は、異なるプラットフォーム(Intel, AMD, ARM)上で性能評価を行い、その結果、異なるプラットフォーム上でのグラフ処理性能を大幅に向上させることができることを示しました。そして、2019年11月のGreen graph500大規模データセットリストで世界No.1を達成しました。

本論文の各章は以下のように構成されている。第2章では、本論文でも実装しているBFSアルゴリズムの一般的な最適化手法を体系的にまとめた。第3章では、我々が提案したアルゴリズムの分類アプローチを紹介する。第4章では、グラフデータを理解するための新しい基本的な視点を紹介する。第5章では、強力で効果的なグラフデータの探索手法を紹介する。第6章では、その結果を紹介する。第7章では全文をまとめている。

●関連研究

●ハイブリッド最適化
従来のBFSアルゴリズムは、トップダウン型のトラバーサル手法であり、トラバーサルの後に多数の無効な検出が発生します。Beamerは、無効なトラバーサルを減らすために、ボトムアップアルゴリズムを独創的に提案しました[12]。アルゴリズム1に示すように、ボトムアップアルゴリズムはトップダウンとは正反対の考え方を用いています。それは、現在のレイヤに位置する未訪問の頂点に隣接する頂点があるかどうかをチェックし、ある場合は、ループを抜け出して残りの隣接する頂点へのアクセスを終了し、冗長なアクセスオーバーヘッドを効果的に削減します。しかし、ボトムアップアルゴリズムでは、前の層の無効な検出数が多く発生する。トップダウンとボトムアップを組み合わせ、探索の初期にトップダウンを用い、探索の中盤と後半でボトムアップに切り替えることで、探索効率を大幅に向上させることができる。

●NUMA最適化
（NUMA：共有メモリ型マルチプロセッサコンピュータシステムのアーキテクチャのひとつ）
プロセッサのコア数の増加とソケット数の増加に伴い、シングルチップメモリインターコネクトアーキテクチャがボトルネックとなり、NUMAアーキテクチャが主流のアーキテクチャに発展してきました。Yasuiら[13]は、NUMAアーキテクチャのこの特徴のために、トップダウンアルゴリズムとボトムアップアルゴリズムの特徴に基づいてNUMAデータを再スペクト的に前処理するNUMAグラフ分割法を提案した。この方法は、グラフデータへのNUMAアクセスの局所性を大幅に改善する。式（１）は、ｋ番目のＮＵＭＡが分割される頂点の集合を表し、ここで、ｌはＮＵＭＡノードの数、ｎは全頂点の数を表す。式(2)は、トップダウンアルゴリズムにおいてk番目のNUMAが署名されたアウトエッジ隣人の隣接リストを表し、式(3)は、ボトムアップアルゴリズムにおいてk番目のNUMAが割り当てられたインエッジ隣人の隣接リストを表す。また、全体的なｎｕｍａの局所性を向上させるために、現層の頂点ＣＱ、訪問情報ＶＳ、次の層の頂点ＮＱ、親配列もｎｕｍａデータとして分割する。上記のＮＵＭＡ分割、トップダウン、ボトムアップを実行するためのアルゴリズム２。この方法により、グラフデータのＮＵＭＡロカリティが大幅に改善される。

●程度を知っているボトムアップ
ボトムアップアルゴリズムは、その探索で訪問されていないすべての近傍頂点をスキャンし、現在のレイヤで近傍頂点が発見され次第、残りの近傍頂点の探索を終了する。終了が早ければ早いほど，近隣チェックの回数を減らすことができる．Yasuiら[13]は実験的に頂点の度数とアクセス頻度の間に相関関係があることを発見し、頂点の度数が高いほどアクセス頻度が高くなることを示しています。アルゴリズム３に示すように、各頂点の隣り合わせリストを、最も度数の高い隣り合わせ頂点のみを含むAIN+と、度数ごとに降順に配列された再隣接リストAIN-に分割し、ボトムアップアルゴリズムを両隣り合わせリストの処理に分割すると、多数の頂点がAIN+で正常に検出されるだけでなく、アルゴリズムの12-19行目から順次AIN+が訪問されます。これは、再冗長なエッジのトラバーサルを大幅に減少させるだけでなく、データのアクセスの局所性を向上させる。

●静的ラウンドロビンシャッフル
自然グラフは、度数や頂点数の分布が極端に不均衡なパワーローグラフであり、マルチコアの負荷が不均衡であったり、スレッドレベルの並列性が不便であったりするため、マルチコアアーキテクチャの利点をいかにして最大限に活用するかが課題となる。我々は、ラウンドロビンによって頂点をその度合に応じて割り当てる静的なラウンドロビン・シャフフフレ最適化手法を提案している[14]。4に示すように、頂点を次数の降順にソートし、次数の高い頂点と次数の低い頂点を均等に割り当てるようにポーリングを行い、各同時実行エンティティの中で次数の降順に頂点が保たれるようにしている。実際には、numaデータパーティショニングを使用する場合、まずnumaレベルの静的ラウンドロビンshuf-freeデータパーティショニングを考え、次にスレッドレベルのデータパーティショニングを考えます。上記の方法により、一方では頂点順序のデータロカリティが維持されます。一方で、各スレッドでの頂点への逐次メモリアクセスを改善します。スレッドの頻繁なダイナムスケジューリングに起因するオーバーヘッドや、ダイナミックアロケーション法におけるブロック粒度の経験的なパラメータ調整を回避することができる。問題の最適化を行う際に、データの前処理が同時実行エンティティ間の大きな負荷不均衡につながることが判明した場合は、静的ラウンドロビンシャッフルの使用を検討して、簡単にアクセス可能な負荷分散を得ることができます。